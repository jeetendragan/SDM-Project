require(nnet)
rm(list = ls())
train = read.csv('train.csv')
head(train)
sapply(train, function(x) sum(is.na(x)))
sapply(train_imp, function(x) sum(is.na(x)))
which(is.na(train$Employment_Info_4))
summary(train$Employment_Info_4)
cor(train$Response,train$Employment_Info_4)
rm(train_imp)
#removing the columns with NAs greater than 6000(more than 10% of data)
train_imp=train
x = list()
count =1
for (i in 1:128){
if (sum(is.na(train[,i]))>6000){
x[count] = i
count = count+1
}
}
x = unlist(x)
train_imp = train[,-x]
train_imp = na.omit(train_imp)
str(train_imp$Product_Info_2)
train_imp$Product_Info_2 = as.numeric(train_imp$Product_Info_2)
set.seed(1)
totalRows = dim(train_imp)[1]
trainIndices = sample( c(1:totalRows), totalRows*0.75)
finalTrain = train_imp[trainIndices, ]
finalTest = train_imp[-trainIndices, ]
model <- multinom(Response ~ ., data = finalTrain)
summary(model)
require(nnet)
rm(list = ls())
train = read.csv('train.csv')
head(train)
sapply(train, function(x) sum(is.na(x)))
sapply(train_imp, function(x) sum(is.na(x)))
which(is.na(train$Employment_Info_4))
summary(train$Employment_Info_4)
cor(train$Response,train$Employment_Info_4)
rm(train_imp)
#removing the columns with NAs greater than 6000(more than 10% of data)
train_imp=train
x = list()
count =1
for (i in 1:128){
if (sum(is.na(train[,i]))>6000){
x[count] = i
count = count+1
}
}
x = unlist(x)
train_imp = train[,-x]
train_imp = na.omit(train_imp)
str(train_imp$Product_Info_2)
train_imp$Product_Info_2 = as.numeric(train_imp$Product_Info_2)
set.seed(1)
totalRows = dim(train_imp)[1]
trainIndices = sample( c(1:totalRows), totalRows*0.75)
finalTrain = train_imp[trainIndices, ]
finalTest = train_imp[-trainIndices, ]
model <- multinom(Response ~ ., data = finalTrain)
prediction = predict(model, finalTest[1:5, ])
prediction
str(prediction)
prediction = predict(model, finalTest)
prediction
str(finalTest$Response)
factor(finalTest$Response)
#predicted.classes <- model %>% predict(test.data)
confusionMatrix(prediction, factor(finalTest$Response))
#predicted.classes <- model %>% predict(test.data)
actual = factor(finalTest$Response)
table(actual, prediction)
install.packages(caret)
install.packages("caret")
library(caret)
confusionMatrix(data = as.factor(prediction),as.factor(finalTest$Response))
write.csv(train_imp, "Final-Train.csv");
